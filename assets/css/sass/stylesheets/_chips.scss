
@mixin stack($dir) {
  content: '';
  position: absolute;
  width: 75px;
  background:    image-url( $dir + '.png',                 false, false) no-repeat unquote($dir) center;
  -webkit-mask:  image-url('mask-' + $dir + '-webkit.png', false, false) no-repeat unquote($dir) center;
  mask:          image-url('mask.svg#chip-mask-' + $dir,   false, false);
  @if $dir == 'bottom' {
    bottom: -13px;
    height: 13px;
  }
  @if $dir == 'top' {
    top: -26px;
    height: 26px;
  }

}

#bets-winnings{ margin-bottom:12pt;}


.stack {

  // ensure those with a count of zero are not visible
  // we use !important here because we display is set with a few more specific selectors below with stack-group
  // this data-count=0 rule should be trumping everything and I don't want to write it again below. 
  
  &[data-count='0']{
    display:none !important;
  }
  
  // set up the text 3d transformation for the text on the chip
  &[data-value] span.value { 
    display: block;
    position: relative;
    top: -23px;
    text-align: center;
    -webkit-transform: rotateX(50deg) rotateZ(21deg); 
    transform: rotateX(50deg) rotateZ(21deg);
  }
  
  // for those with a count, we add in the special background/masks
  &[data-count] {
    position:relative; 
    background: image-url('middle.png', false, false) repeat center 27px;
    width: 75px;
    margin: 26px 0 13px; 
    display:inline-block;
    vertical-align: bottom;
    
    // add before/after pseudo-selectors for the top/bottom backgrounds/masks
    &:before { @include stack('top'); }
    &:after  { @include stack('bottom'); }
  } 
}

// special styling for stackgroup context
// these are displayed block and have special margin considerations
//  - the top has no margin-bottom, 
//  - middle elements have no margins, and 
//  - bottom has no margin-top
//  - when it is an only-child, set same as generic 'stack' margins as above
// 
.stack-group {
  .stack[data-count] {
    display: block;
    &:first-child { margin-bottom: 0 }
    &:nth-last-child(n+2):nth-child(n+2) { margin: 0 }
    &:last-child { margin-top: 0 }
    &:only-child { margin: 26px 0 13px; }
  }
} 
